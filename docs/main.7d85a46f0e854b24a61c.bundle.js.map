{"version":3,"file":"main.7d85a46f0e854b24a61c.bundle.js","sources":["webpack:///./src/styles/digit-layout/DigitLayout.styles.jsx"],"sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\n/**\n * display: display {\"flex\" | \"inline-flex\"}\n * justify-content: justifyContent {\"flex-start\" | \"flex-end\" | \"center\" | \"space-between\" | \"space-around\" | \"space-evenly\"}\n * flex-wrap: flexWrap {\"nowrap\" | \"wrap\" | \"wrap-reverse\"}\n * align-items: alignItems {\"flex-start\" | \"flex-end\" | \"center\" | \"baseline\" | \"stretch\"}\n * align-content: alignContent {\"flex-start\" | \"flex-end\" | \"center\" | \"space-between\" | \"space-around\" | \"stretch\"}\n */\nexport const Flex = styled.div`\n    display: ${props => (!props.inline ? \"flex\" : \"inline-flex\")};\n    justify-content: ${props =>\n        props.justifyContent != null ? props.justifyContent : \"\"};\n    flex-wrap: ${props => (props.flexWrap != null ? props.flexWrap : \"wrap\")};\n    align-items: ${props => (props.alignItems != null ? props.alignItems : \"\")};\n    align-content: ${props =>\n        props.alignContent != null ? props.alignContent : \"\"};\n`;\n\nFlex.displayName = \"Flex\";\nFlex.propTypes = {\n    /** https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-2  */\n    display: PropTypes.oneOf([\"flex\", \"inline-flex\"]),\n    /** https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-6 */\n    justifyContent: PropTypes.oneOf([\n        \"flex-start\",\n        \"flex-end\",\n        \"center\",\n        \"space-between\",\n        \"space-around\",\n        \"space-evenly\"\n    ]),\n    /** https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-4 */\n    flexWrap: PropTypes.oneOf([\"nowrap\", \"wrap\", \"wrap-reverse\"]),\n    /** https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-7 */\n    alignItems: PropTypes.oneOf([\n        \"flex-start\",\n        \"flex-end\",\n        \"center\",\n        \"baseline\",\n        \"stretch\"\n    ]),\n    /** https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-8 */\n    alignContent: PropTypes.oneOf([\n        \"flex-start\",\n        \"flex-end\",\n        \"center\",\n        \"space-between\",\n        \"space-around\",\n        \"stretch\"\n    ])\n};\n\nfunction flexAlignLeftOrTop(leftOrTopAlign, rightOrBottomAlign, reverse) {\n    if (reverse ? rightOrBottomAlign : leftOrTopAlign) {\n        return {\n            justifyContent: \"flex-start\"\n        };\n    }\n    return {};\n}\n\nfunction flexAlignRightOrBottom(leftOrTopAlign, rightOrBottomAlign, reverse) {\n    if (reverse ? leftOrTopAlign : rightOrBottomAlign) {\n        return {\n            justifyContent: \"flex-end\"\n        };\n    }\n    return {};\n}\n\nfunction flexCenterHorizontal(centerHorizontal) {\n    if (centerHorizontal) {\n        return {\n            alignItems: \"center\",\n            alignContent: \"center\"\n        };\n    }\n    return {};\n}\n\nfunction flexCenterVertical(centerVertical) {\n    if (centerVertical) {\n        return {\n            justifyContent: \"center\"\n        };\n    }\n    return {};\n}\n\nexport const Grid = styled.div`\n    display: ${props => (props.inline ? \"inline-grid\" : \"grid\")};\n    grid-template-columns: ${props => props.columns || \"\"};\n    grid-template-rows: ${props => props.rows || \"\"};\n    grid-template-areas: ${props => props.areas || \"\"};\n    grid-column-gap: ${props => props.margin || props.columnGap || \"\"};\n    grid-row-gap: ${props => props.margin || props.rowGap || \"\"};\n    justify-items: ${props => props.justifyItems || \"stretch\"};\n    align-items: ${props => props.alignItems || \"stretch\"};\n    justify-content: ${props => props.justifyContent || \"\"};\n    align-content: ${props => props.alignContent || \"\"};\n    grid-auto-columns: ${props => props.autoColumns || \"\"};\n    grid-auto-rows: ${props => props.autoRows || \"\"};\n    grid-auto-flow: ${props => props.autoFlow || \"\"};\n    flex: ${props => (props.fillElement ? \"1\" : \"\")};\n`;\n\nGrid.displayName = \"Grid\";\nGrid.propTypes = {\n    /** If true, then inline-grid. https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-12 */\n    inline: PropTypes.bool,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13 */\n    columns: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13 */\n    rows: PropTypes.number,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-14 */\n    areas: PropTypes.string,\n    /** Margin between items. Will precedence columnGap and rowGap */\n    margin: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-16 */\n    columnGap: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-16 */\n    rowGap: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-18 */\n    justifyItems: PropTypes.oneOf([\n        \"start\",\n        \"end\",\n        \"center\",\n        \"space-between\",\n        \"space-around\",\n        \"space-evenly\"\n    ]),\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-19 */\n    alignItems: PropTypes.oneOf([\"start\", \"end\", \"center\", \"stretch\"]),\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-21 */\n    justifyContent: PropTypes.oneOf([\n        \"start\",\n        \"end\",\n        \"center\",\n        \"stretch\",\n        \"space-around\",\n        \"space-between\",\n        \"space-evenly\"\n    ]),\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-22 */\n    alignContent: PropTypes.oneOf([\n        \"start\",\n        \"end\",\n        \"center\",\n        \"stretch\",\n        \"space-around\",\n        \"space-between\",\n        \"space-evenly\"\n    ]),\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-24 */\n    autoColumns: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-24 */\n    autoRows: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-25 */\n    autoFlow: PropTypes.string,\n    /** Fill available layout with flex. */\n    fillElement: PropTypes.bool\n};\n\nexport const GridItem = styled.div`\n  grid-column-start: ${props => props.columnStart || \"\"}\n  grid-column-end: ${props => props.columnEnd || \"\"}\n  grid-row-start: ${props => props.rowStart || \"\"}\n  grid-row-end: ${props => props.rowEnd || \"\"}\n  justify-self: ${props => props.justifySelf || \"\"};\n  align-self: ${props => props.alignSelf || \"\"};\n`;\n\nGridItem.displayName = \"GridItem\";\nGridItem.propTypes = {\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-27 */\n    columnStart: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-27 */\n    columnEnd: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-27 */\n    rowStart: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-27 */\n    rowEnd: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-30 */\n    justifySelf: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-31 */\n    alignSelf: PropTypes.string\n};\n\nexport const UniformGrid = styled(\n    ({\n        minItemWidth,\n        children,\n        inline,\n        rows,\n        areas,\n        margin,\n        columnGap,\n        rowGap,\n        justifyItems,\n        alignItems,\n        justifyContent,\n        alignContent,\n        autoFlow,\n        fillElement\n    }) => (\n        <Grid\n            columns={`repeat(auto-fit, minmax(${minItemWidth}, 1fr));`}\n            margin={margin}\n            inline={inline}\n            rows={rows}\n            areas={areas}\n            columnGap={columnGap}\n            rowGap={rowGap}\n            justifyItems={justifyItems}\n            alignItems={alignItems}\n            justifyContent={justifyContent}\n            alignContent={alignContent}\n            autoFlow={autoFlow}\n            fillElement={fillElement}\n        >\n            {children}\n        </Grid>\n    )\n)`\n    & > * {\n        min-height: ${props => props.minItemHeight || \"\"};\n    }\n`;\n\nUniformGrid.displayName = \"UniformGrid\";\nUniformGrid.propTypes = {\n    /** the minimum allowed width for the items whitin the grid. */\n    minItemWidth: PropTypes.string,\n    /** the minimum allowed height for the items whitin the grid. */\n    minItemHeight: PropTypes.string,\n    /** All the children */\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]).isRequired,\n    /** If true, then inline-grid. https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-12 */\n    inline: PropTypes.bool,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13 */\n    columns: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13 */\n    rows: PropTypes.number,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-14 */\n    areas: PropTypes.string,\n    /** Margin between items. Will precedence columnGap and rowGap */\n    margin: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-16 */\n    columnGap: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-16 */\n    rowGap: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-18 */\n    justifyItems: PropTypes.oneOf([\n        \"start\",\n        \"end\",\n        \"center\",\n        \"space-between\",\n        \"space-around\",\n        \"space-evenly\"\n    ]),\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-19 */\n    alignItems: PropTypes.oneOf([\"start\", \"end\", \"center\", \"stretch\"]),\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-21 */\n    justifyContent: PropTypes.oneOf([\n        \"start\",\n        \"end\",\n        \"center\",\n        \"stretch\",\n        \"space-around\",\n        \"space-between\",\n        \"space-evenly\"\n    ]),\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-22 */\n    alignContent: PropTypes.oneOf([\n        \"start\",\n        \"end\",\n        \"center\",\n        \"stretch\",\n        \"space-around\",\n        \"space-between\",\n        \"space-evenly\"\n    ]),\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-24 */\n    autoColumns: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-24 */\n    autoRows: PropTypes.string,\n    /** https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-25 */\n    autoFlow: PropTypes.string,\n    /** Fill available layout with flex. */\n    fillElement: PropTypes.bool\n};\n\nexport const Column = styled(\n    ({\n        center,\n        centerVertical,\n        centerHorizontal,\n        topAlign,\n        bottomAlign,\n        reverse,\n        marginVertical,\n        fillElement,\n        children,\n        scroll,\n        ...rest\n    }) => (\n        <Flex\n            {...flexCenterHorizontal(center || centerHorizontal)}\n            {...flexCenterVertical(center || centerVertical)}\n            {...flexAlignLeftOrTop(topAlign, bottomAlign, reverse)}\n            {...flexAlignRightOrBottom(topAlign, bottomAlign, reverse)}\n            {...rest}\n        >\n            {children}\n        </Flex>\n    )\n)`\n    flex-direction: ${props => (!props.reverse ? \"column\" : \"column-reverse\")};\n    > * {\n        margin-top: ${props => props.marginVertical};\n        margin-bottom: ${props => props.marginVertical};\n    }\n    flex: ${props => (props.fillElement ? \"1\" : \"\")};\n    overflow: ${props => (props.scroll ? \"scroll\" : \"visible\")};\n`;\n\nColumn.displayName = \"Column\";\nColumn.propTypes = {\n    /** If true, then centerVertical and centerHorizontal is true */\n    center: PropTypes.bool,\n    /** If true, then aligns center vertically */\n    centerVertical: PropTypes.bool,\n    /** If true, then aligns center horizontal */\n    centerHorizontal: PropTypes.bool,\n    /** If true, then aligns top */\n    topAlign: PropTypes.bool,\n    /** If true, then align bottom */\n    bottomAlign: PropTypes.bool,\n    /** If true, then reverses the order */\n    reverse: PropTypes.bool,\n    /** Fill available layout with flex. */\n    fillElement: PropTypes.bool,\n    /** All the children */\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]),\n    /**\n     * Should be avoided, only use if you feel comfortable in flex. Try to use any of the other default column properties.\n     * https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-2\n     */\n    display: PropTypes.oneOf([\"flex\", \"inline-flex\"]),\n    /**\n     * Should be avoided, only use if you feel comfortable in flex. Try to use any of the other default column properties.\n     * https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-6\n     */\n    justifyContent: PropTypes.oneOf([\n        \"flex-start\",\n        \"flex-end\",\n        \"center\",\n        \"space-between\",\n        \"space-around\",\n        \"space-evenly\"\n    ]),\n    /**\n     * Should be avoided, only use if you feel comfortable in flex. Try to use any of the other default column properties.\n     * https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-4\n     */\n    flexWrap: PropTypes.oneOf([\"nowrap\", \"wrap\", \"wrap-reverse\"]),\n    /**\n     * Should be avoided, only use if you feel comfortable in flex. Try to use any of the other default column properties.\n     * https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-7\n     */\n    alignItems: PropTypes.oneOf([\n        \"flex-start\",\n        \"flex-end\",\n        \"center\",\n        \"baseline\",\n        \"stretch\"\n    ]),\n    /**\n     * Should be avoided, only use if you feel comfortable in flex. Try to use any of the other default column properties.\n     * https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-8\n     */\n    alignContent: PropTypes.oneOf([\n        \"flex-start\",\n        \"flex-end\",\n        \"center\",\n        \"space-between\",\n        \"space-around\",\n        \"stretch\"\n    ]),\n    /** If true, then overflow will show a scrollbar. */\n    scroll: PropTypes.bool\n};\n\nColumn.defaultProps = {\n    flexWrap: \"nowrap\",\n    margin: \"0px\",\n    marginVertical: \"4px\"\n};\n\nexport const Row = styled(\n    ({\n        center,\n        centerVertical,\n        centerHorizontal,\n        leftAlign,\n        rightAlign,\n        reverse,\n        fillElement,\n        children,\n        scroll,\n        marginHorizontal,\n        ...rest\n    }) => (\n        <Flex\n            {...flexCenterHorizontal(center || centerVertical)}\n            {...flexCenterVertical(center || centerHorizontal)}\n            {...flexAlignLeftOrTop(leftAlign, rightAlign, reverse)}\n            {...flexAlignRightOrBottom(leftAlign, rightAlign, reverse)}\n            {...rest}\n        >\n            {children}\n        </Flex>\n    )\n)`\n    flex-direction: ${props => (!props.reverse ? \"row\" : \"row-reverse\")};\n    > * {\n        margin-right: ${props => props.marginHorizontal};\n        margin-left: ${props => props.marginHorizontal};\n    }\n    flex: ${props => (props.fillElement ? \"1\" : \"\")};\n    overflow: ${props => (props.scroll ? \"scroll\" : \"visible\")};\n`;\n\nRow.displayName = \"Row\";\nRow.propTypes = {\n    /** If true, then centerVertical and centerHorizontal is true */\n    center: PropTypes.bool,\n    /** If true, then aligns center vertically */\n    centerVertical: PropTypes.bool,\n    /** If true, then aligns center horizontal */\n    centerHorizontal: PropTypes.bool,\n    /** If true, aligns the items left */\n    leftAlign: PropTypes.bool,\n    /** If true, aligns the items right */\n    rightAlign: PropTypes.bool,\n    /** If true, reverses the order of the children*/\n    reverse: PropTypes.bool,\n    /** Fill available layout with flex. */\n    fillElement: PropTypes.bool,\n    /** All the children */\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]),\n    /**\n     * Should be avoided, only use if you feel comfortable in flex. Try to use any of the other default row properties.\n     * https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-2\n     */\n    display: PropTypes.oneOf([\"flex\", \"inline-flex\"]),\n    /**\n     * Should be avoided, only use if you feel comfortable in flex. Try to use any of the other default row properties.\n     * https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-6\n     */\n    justifyContent: PropTypes.oneOf([\n        \"flex-start\",\n        \"flex-end\",\n        \"center\",\n        \"space-between\",\n        \"space-around\",\n        \"space-evenly\"\n    ]),\n    /**\n     * Should be avoided, only use if you feel comfortable in flex. Try to use any of the other default row properties.\n     * https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-4\n     */\n    flexWrap: PropTypes.oneOf([\"nowrap\", \"wrap\", \"wrap-reverse\"]),\n    /**\n     * Should be avoided, only use if you feel comfortable in flex. Try to use any of the other default row properties.\n     * https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-7\n     */\n    alignItems: PropTypes.oneOf([\n        \"flex-start\",\n        \"flex-end\",\n        \"center\",\n        \"baseline\",\n        \"stretch\"\n    ]),\n    /**\n     * Should be avoided, only use if you feel comfortable in flex. Try to use any of the other default row properties.\n     * https://css-tricks.com/snippets/css/a-guide-to-flexbox/#article-header-id-8\n     */\n    alignContent: PropTypes.oneOf([\n        \"flex-start\",\n        \"flex-end\",\n        \"center\",\n        \"space-between\",\n        \"space-around\",\n        \"stretch\"\n    ]),\n    /** If true, then overflow will show a scrollbar. */\n    scroll: PropTypes.bool\n};\n\nRow.defaultProps = {\n    flexWrap: \"nowrap\",\n    margin: \"0px\",\n    marginHorizontal: \"4px\"\n};\n\nexport const DownRightPosition = styled.div`\n    position: absolute;\n    right: 16px;\n    bottom: 16px;\n`;\n\nDownRightPosition.displayName = \"DownRightPosition\";\n\nexport const Fill = styled.div`\n    flex-grow: 1;\n    flex-shrink: 1;\n    flex-basis: 1;\n\n    display: flex;\n    flex-direction: column;\n    padding: 0px;\n`;\n\nFill.displayName = \"Fill\";\n\nexport const MarginTop = styled(Fill)`\n    margin-top: 8px;\n`;\n\nMarginTop.displayName = \"MarginTop\";\n\nexport const MarginBottom = styled(Fill)`\n    margin-bottom: 8px;\n`;\n\nMarginBottom.displayName = \"MarginBottom\";\n\nexport const MarginLeft = styled(Fill)`\n    margin-left: 8px;\n`;\n\nMarginLeft.displayName = \"MarginLeft\";\n\nexport const MarginRight = styled(Fill)`\n    margin-right: 8px;\n`;\n\nMarginRight.displayName = \"MarginRight\";\n\nexport const Margin = styled(Fill)`\n    margin: 4px;\n`;\n\nMargin.displayName = \"Margin\";\n\nexport const Spacing = styled.div`\n    display: block;\n    width: 8px;\n    height: 8px;\n`;\n\nSpacing.displayName = \"Spacing\";\n\nexport const Padding = styled(Fill)`\n    padding: 4px;\n`;\n\nPadding.displayName = \"Padding\";\n\nexport const Center = styled.div`\n    flex-grow: 1;\n    flex-shrink: 1;\n    flex-basis: 1;\n\n    display: grid;\n    grid-template-columns: auto;\n    grid-template-rows: auto;\n    justify-content: center;\n    align-content: center;\n`;\n\nCenter.displayName = \"Center\";\n\nexport const HideFill = styled(Fill)`\n    display: ${props => (props.hidden ? \"none\" : \"inherit\")};\n`;\n\nHideFill.displayName = \"HideFill\";\nHideFill.propTypes = {\n    hidden: PropTypes.bool\n};\n\nexport const Hide = styled.div`\n    display: ${props => (props.hidden ? \"none\" : \"inherit\")};\n`;\n\nHide.displayName = \"Hide\";\nHide.propTypes = {\n    hidden: PropTypes.bool\n};\n\nexport const Size = styled(Flex)`\n    width: ${props => (props.absWidth != null ? props.absWidth : props.width)};\n    height: ${props =>\n        props.absHeight != null ? props.absHeight : props.height};\n\n    max-width: ${props =>\n        props.absWidth != null ? props.absWidth : props.maxWidth};\n    max-height: ${props =>\n        props.absHeight != null ? props.absHeight : props.maxHeight};\n\n    min-width: ${props =>\n        props.absWidth != null ? props.absWidth : props.minWidth};\n    min-height: ${props =>\n        props.absHeight != null ? props.absHeight : props.minHeight};\n\n    overflow: ${props => (props.autoScroll ? \"auto\" : \"visible\")};\n`;\n\nSize.displayName = \"Size\";\nSize.propTypes = {\n    /** Sets minWidth, maxWidth and width to absWidth */\n    absWidth: PropTypes.string,\n    /** Sets minHeight, maxHeight and height to absHeight */\n    absHeight: PropTypes.string,\n    /** minWidth of the child */\n    minWidth: PropTypes.string,\n    /** minHeight of the child */\n    minHeight: PropTypes.string,\n    /** maxWidth of the child */\n    maxWidth: PropTypes.string,\n    /** maxHeight of the child */\n    maxHeight: PropTypes.string,\n    /** width of the child */\n    width: PropTypes.string,\n    /** height of the child */\n    height: PropTypes.string\n};\n\nexport const Order = styled(Flex)`\n    order: ${props => props.order};\n`;\n\nOrder.displayName = \"Order\";\nOrder.propTypes = {\n    /** The order of the child  */\n    order: PropTypes.number.isRequired\n};\n"],"mappings":"AAWA","sourceRoot":""}