{"version":3,"file":"static/iframe.13a72ac8f8ccca50afb8.bundle.js","sources":["webpack:///./components/views/digit-toast/DigitToast.view.jsx"],"sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { StyledSnackbar, ToastButton } from \"./DigitToast.view.styles\";\n\nclass DigitToast extends React.Component {\n    state = {\n        open: false,\n        toastClosed: true,\n        currentText: \"\",\n        currentDuration: 0,\n        currentActionHandler: null,\n        currentActionText: \"\",\n        messages: []\n    };\n\n    handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        this.setState({\n            open: false\n        });\n    };\n\n    handleExited = () => {\n        this.setState({\n            toastClosed: true\n        });\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (\n            this.state.open &&\n            this.state.messages.length > 0 &&\n            !this.toastClosed\n        ) {\n            this.setState({\n                open: false\n            });\n        } else if (\n            prevState !== this.state &&\n            !this.state.open &&\n            this.state.messages.length > 0 &&\n            this.state.toastClosed\n        ) {\n            const {\n                text,\n                duration,\n                actionHandler,\n                actionText\n            } = this.state.messages.pop();\n\n            this.setState({\n                open: true,\n                toastClosed: false,\n                currentText: text,\n                currentDuration: duration,\n                currentActionHandler: actionHandler,\n                currentActionText: actionText\n            });\n        }\n\n        //A new message get added through props, one added, props will be ignored until next update\n        else if (prevProps !== this.props) {\n            const {\n                text,\n                duration,\n                actionHandler,\n                actionText\n            } = this.props.toastOptions;\n\n            this.setState({\n                messages: [\n                    ...this.state.messages,\n                    {\n                        text: text,\n                        duration: duration == null ? 3000 : duration,\n                        actionText: actionText,\n                        actionHandler: actionHandler\n                    }\n                ]\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <StyledSnackbar\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"left\"\n                    }}\n                    autoHideDuration={this.state.currentDuration}\n                    open={this.state.open}\n                    onClose={this.handleClose}\n                    onExited={this.handleExited}\n                    ContentProps={{\n                        \"aria-describedby\": \"message-id\"\n                    }}\n                    message={\n                        <span id=\"message-id\">{this.state.currentText}</span>\n                    }\n                    action={\n                        <ToastButton\n                            hide={this.state.currentActionText == null}\n                            key=\"undo\"\n                            color=\"secondary\"\n                            size=\"small\"\n                            onClick={() => {\n                                this.state.currentActionHandler();\n                                this.handleClose();\n                            }}\n                        >\n                            {this.state.currentActionText == null //Text in a button must not be null\n                                ? \"\"\n                                : this.state.currentActionText}\n                        </ToastButton>\n                    }\n                />\n            </div>\n        );\n    }\n}\n\nDigitToast.displayName = \"DigitToast\";\nDigitToast.propTypes = {\n    /** The options for the toast */\n    toastOptions: PropTypes.shape({\n        /** The text inside the toast */\n        text: PropTypes.string,\n        /** The duration in miliseconds of the toast */\n        duration: PropTypes.number,\n        /** Callback function when you press the button on a toast */\n        actionHandler: PropTypes.func,\n        /** Button text */\n        actionText: PropTypes.string\n    })\n};\n\nexport default DigitToast;\n"],"mappings":"AAAA","sourceRoot":""}