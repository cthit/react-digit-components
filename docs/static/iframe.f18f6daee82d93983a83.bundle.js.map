{"version":3,"file":"static/iframe.f18f6daee82d93983a83.bundle.js","sources":["webpack:///./components/elements/digit-date-picker/DigitDatePicker.element.jsx"],"sourcesContent":["import withStyles from \"@material-ui/core/styles/withStyles\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Keyboard from \"@material-ui/icons/Keyboard\";\nimport { DatePicker } from \"material-ui-pickers\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nconst styles = () => ({\n    root: {\n        flex: 1,\n        width: \"100%\"\n    }\n});\n\nconst DigitDatePicker = ({\n    value,\n    onChange,\n    upperLabel,\n    showTodayButton,\n    todayLabel,\n    cancelLabel,\n    okLabel,\n    clearLabel,\n    emptyLabel,\n    invalidLabel,\n    classes,\n    filled,\n    outlined,\n    lowerLabel,\n    error,\n    errorMessage\n}) => (\n    <DatePicker\n        label={upperLabel}\n        error={error}\n        helperText={error && errorMessage !== \"\" ? errorMessage : lowerLabel}\n        value={value}\n        onChange={date => onChange(date)}\n        showTodayButton={showTodayButton}\n        todayLabel={todayLabel}\n        cancelLabel={cancelLabel}\n        okLabel={okLabel}\n        clearLabel={clearLabel}\n        emptyLabel={emptyLabel}\n        invalidLabel={invalidLabel}\n        className={classes.root}\n        keyboardIcon={<Keyboard />}\n        leftArrowIcon={<ChevronLeft />}\n        rightArrowIcon={<ChevronRight />}\n        variant={filled ? \"filled\" : outlined ? \"outlined\" : \"standard\"}\n    />\n);\n\nDigitDatePicker.displayName = \"DigitDatePicker\";\nDigitDatePicker.propTypes = {\n    /** The current value. This component is uncontrolled, meaning that\n     * you have to store the value and react on changes using\n     * the onChange function.\n     */\n    value: PropTypes.instanceOf(Date),\n    /** This function will be called when the user has selected\n     * a new date.\n     */\n    onChange: PropTypes.func.isRequired,\n    /** A label that is shown over the input field. */\n    upperLabel: PropTypes.string,\n    /** If true, then a today button will be shown.  */\n    showTodayButton: PropTypes.bool,\n    /** A button to select todays date. Is only shown\n     * if showTodayButton is true.\n     */\n    todayLabel: PropTypes.string,\n    /** The label for the cancel button. The user presses button\n     * when they want to close the dialog and not save the date.\n     */\n    cancelLabel: PropTypes.string,\n    /** The label for the ok button. The user presses this button\n     * when they have selected a date.\n     */\n    okLabel: PropTypes.string,\n    /** Button text for the clear button, which will clear the button.\n     * The clear button will only be shown if clearable is true.\n     */\n    clearLabel: PropTypes.string,\n    /** What will be presented if no date has been selected */\n    emptyLabel: PropTypes.string,\n    /** What will be presented if a date is invalid */\n    invalidLabel: PropTypes.string,\n    outlined: PropTypes.bool,\n    filled: PropTypes.bool,\n    lowerLabel: PropTypes.string,\n    error: PropTypes.bool,\n    errorMessage: PropTypes.string\n};\n\nDigitDatePicker.defaultProps = {\n    value: null,\n    upperLabel: \"\",\n    lowerLabel: \"\",\n    showTodayButton: false,\n    todayLabel: \"Idag\",\n    cancelLabel: \"Avbryt\",\n    okLabel: \"Ok\",\n    clearLabel: \"Rensa\",\n    emptyLabel: \"Tryck här för datum\",\n    invalidLabel: \"Ogiltigt datum\",\n    filled: false,\n    outlined: false,\n    error: false,\n    errorMessage: \"\"\n};\n\n/** This is a temp solution to get the correct prop types from StoryBook. */\nexport { DigitDatePicker };\n\nexport default withStyles(styles)(DigitDatePicker);\n"],"mappings":"AAAA","sourceRoot":""}